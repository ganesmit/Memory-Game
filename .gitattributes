# Auto detect text files and perform LF normalization
* text=auto

MemoryGame.css 

/*
intro to 3d rotations:
https://desandro.github.io/3dtransforms/docs/card-flip.html
*/

body {
  background-color: #47ca18;
}

.btn:hover {
  cursor: pointer;
}

#start {
  height: 90vh;
  font-family: 'Bungee', cursive;
  color: #c12109;
  position: relative;
}

#title {
  font-size: 7rem;
  perspective: 500px;
}

#title > p {
  transform: rotateX( 45deg );
  line-height: 0.75;
  text-align: center;
  color: #db0606;
}

#start.playing {
  margin-top: -90vh;
  transition: margin-top 1s;
}

#start.playing + #game {
  display: flex;
}

#game {
  display: none;
}

#game .row {
  width: 100%;
}

.container {
  flex-wrap: wrap;
}

.game-card-wrapper {
  perspective: 600px;
  width: 75%;
  padding-bottom: 75%;
  position: relative;
  margin: 1rem auto;
}

.game-card-wrapper:hover {
  cursor: pointer;
}

.game-card {
  width: 100%;
  height: 100%;
  position: absolute;
  transform-style: preserve-3d;
  transition: transform 1s;
}

.game-card.flipped {
  transform: rotateY( 180deg );
}

.front,
.back {
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  backface-visibility: hidden;
  width: 100%;
  height: 100%;
  border-radius: 8px;
  border: 2px solid black;
  overflow: hidden;
}

.front {
  background: linear-gradient(315deg, #100cef, white);
  font-size: 3rem;
}

.back {
  transform: rotateY( 180deg );
}

.back > img {
  height: 100%;
  width: auto;
}

#current-score {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 4rem;
  font-family: 'Bungee', cursive;
  color: #140df1;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

#end {
  display: none;
}

#end.game-over {
  display: flex;
  position: absolute;
  background-color: rgba(0,0,0,0.75);
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  flex-direction: column;
  align-items: center;
  color: white;
  justify-content: space-around;
  font-family: 'Bungee', cursive;
  text-align: center;
}

#end h1 {
  font-size: 8rem;
}

#end h4 {
  font-size: 3rem;
}

@media (max-width: 992px) {
  .game-card-wrapper {
    width: 100%;
    padding-bottom: 100%;
  }
}

@media (max-width: 992px) {
  .game-card-wrapper {
    width: 120%;
    padding-bottom: 120%;
  }


Memory Game.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Match The Card Pairs!</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css" integrity="sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb" crossorigin="anonymous">
  <link href="https://fonts.googleapis.com/css?family=Tangerine" rel="stylesheet">
  <link rel="stylesheet" href="MemoryGame.css">
</head>
<body>
  <div class="container" id="start">
    <div class="row">
      <div class="col-12">
        <div id="title">
          <p>Memory Game!</p>
          <p>Match Each</p>
          <p>Card Pairs</p>
          <P></P>
        </div>
      </div>
    </div>
    <div class="row text-center">
      <div class="col-sm-6 offset-sm-3 col-12 mt-4 mb-4">
        <h2>Best Score: <span id="best-score">&mdash;</span></h2>
      </div>
    </div>
    <div class="row text-center">
      <div class="col-4 offset-4">
        <button id="start-button" class="btn btn-primary btn-block btn-lg pt-4 pb-4">Start!</button>
      </div>
    </div>
  </div>
  <div class="container" id="game">
    <div class="row">
      <div class="col-2 offset-1">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-2 offset-1">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-2 offset-1">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div id="current-score"></div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-2 offset-1">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-2 offset-1">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
      <div class="col-2">
        <div class="game-card-wrapper">
          <div class="game-card">
            <div class="front"></div>
            <div class="back">
              <img>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="end">
    <h1>You Win!</h1>
    <h4 id="final-score"></h4>
    <a href="MemoryGame.html" id="restart-button" class="btn btn-primary btn-lg p-4">Play Again?</a>
  </div>
  <script src="MemoryGame.js"></script>
</body>
</html>


Memory Game.js

document.addEventListener("DOMContentLoaded", function() {
  const cards = document.querySelectorAll(".game-card");
  let numCards = cards.length;
  let card1 = null;
  let card2 = null;
  let cardsFlipped = 0;
  let currentScore = 0;
  let lowScore = localStorage.getItem("low-score");
  let start = document.getElementById("start");

  if (lowScore) {
    document.getElementById("best-score").innerText = lowScore;
  }

  for (let card of cards) {
    card.addEventListener("click", handleCardClick);
  }

  let startBtn = document.getElementById("start-button");
  startBtn.addEventListener("click", startGame);

  function handleCardClick(e) {
    if (!e.target.classList.contains("front")) return;

    let currentCard = e.target.parentElement;

    if (!card1 || !card2) {
      if (!currentCard.classList.contains("flipped")) {
        setScore(currentScore + 1);
      }
      currentCard.classList.add("flipped");
      card1 = card1 || currentCard;
      card2 = currentCard === card1 ? null : currentCard;
    }

    if (card1 && card2) {
      let gif1 = card1.children[1].children[0].src;
      let gif2 = card2.children[1].children[0].src;

      if (gif1 === gif2) {
        cardsFlipped += 2;
        card1.removeEventListener("click", handleCardClick);
        card2.removeEventListener("click", handleCardClick);
        card1 = null;
        card2 = null;
      } else {
        setTimeout(function() {
          card1.classList.remove("flipped");
          card2.classList.remove("flipped");
          card1 = null;
          card2 = null;
        }, 1000);
      }
    }

    if (cardsFlipped === numCards) endGame();
  }

  function startGame() {
    setScore(0);
    start.classList.add("playing");
    let indices = [];
    for (let i = 1; i <= numCards / 2; i++) {
      indices.push(i.toString());
    }
    let pairs = shuffle(indices.concat(indices));

    for (let i = 0; i < cards.length; i++) {
      let path = "gifs/" + pairs[i] + ".gif";
      cards[i].children[1].children[0].src = path;
    }
  }

  function shuffle(array) {
    let arrayCopy = array.slice();
    for (let idx1 = arrayCopy.length - 1; idx1 > 0; idx1--) {
      // generate a random index between 0 and idx1 (inclusive)
      let idx2 = Math.floor(Math.random() * (idx1 + 1));

      // swap elements at idx1 and idx2
      let temp = arrayCopy[idx1];
      arrayCopy[idx1] = arrayCopy[idx2];
      arrayCopy[idx2] = temp;
    }
    return arrayCopy;
  }

  function setScore(newScore) {
    currentScore = newScore;
    document.getElementById("current-score").innerText = currentScore;
  }

  function endGame() {
    let end = document.getElementById("end");
    let scoreHeader = end.children[1];
    scoreHeader.innerText = "Your score: " + currentScore;
    let lowScore = +localStorage.getItem("low-score") || Infinity;
    if (currentScore < lowScore) {
      scoreHeader.innerText += " - NEW BEST SCORE!!";
      localStorage.setItem("low-score", currentScore);
    }
    document.getElementById("end").classList.add("game-over");
  }
});
